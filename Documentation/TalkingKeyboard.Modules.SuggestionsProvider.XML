<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TalkingKeyboard.Modules.SuggestionsProvider</name>
    </assembly>
    <members>
        <member name="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource">
            <summary>
                This class implements a disambiguation algorithm for multi-character text entry.
            </summary>
            <seealso cref="T:TalkingKeyboard.Infrastructure.ServiceInterfaces.ISuggestionSource" />
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource" /> class.
            </summary>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.Add(System.String)">
            <summary>
                Adds a multi-character to the buffer.
            </summary>
            <param name="s">The multi-character to add.</param>
            <remarks>
                The multi-character is a string with several characters, each of which will be considered as a potential
                character for the current position in the text. These characters may be separated by any whitespace character found
                in <see cref="P:TalkingKeyboard.Infrastructure.Constants.CharacterClasses.Whitespace" />
            </remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.ClearMultiCharacterBuffer">
            <summary>
                Clears the multi character buffer.
            </summary>
            <remarks>
                This only virtually clears the buffer by returning to the original dictionary (position zero in the list of
                filtered dictionaries). The rest of the dictionaries are not unassigned but will be overwritten as multi-characters
                are added.
            </remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.GetSuggestions(System.Object)">
            <summary>
                Filters and returns suggestions according to the multi-key buffer.
            </summary>
            <param name="basedOn">Nothing is required. May be used later on.</param>
            <returns>
                Returns an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> with disambiguation suggestions
                first and then auto-complete suggestions.
            </returns>
            <remarks>
                Disambiguation are those which match the number of keys selected and auto-complete are those which include keys
                which have not been selected yet.
            </remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.LoadDictionarySortedByFrequency(System.String)">
            <summary>
                Loads the dictionary sorted by frequency.
            </summary>
            <param name="filePath">The file path where the dictionary is located.</param>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.RemoveLastMultiCharacter">
            <summary>
                Removes the last multi-character.
            </summary>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.FilterDictionaryToHigherThanWordLength(System.Int32)">
            <summary>
                Filters the dictionary to only leave words longer than <see cref="!:wordLength" />.
            </summary>
            <param name="wordLength">Max inadmissible length of word.</param>
            <returns>The filtered dictionary.</returns>
            <remarks>Here "dictionary" is not meant as a type. It is a list of words.</remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.FilterDictionaryToWordLength(System.Int32)">
            <summary>
                Filters the dictionary to only leave words of length <see cref="!:wordLength" />..
            </summary>
            <param name="wordLength">Max inadmissible length of word.</param>
            <returns>The filtered dictionary.</returns>
            <remarks>Here "dictionary" is not meant as a type. It is a list of words.</remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.MultiCharacterSuggestionSource.UpdateFilteredDictionary(System.String)">
            <summary>
                Updates the dictionary list (multi-character buffer) given a new multi-character.
            </summary>
            <param name="addedMultiCharacter">The added multi-character.</param>
            <remarks>
                <para>
                    The multi-character buffer is essentially a list of word lists (dictionaries), where the first one is the
                    original
                    dictionary and each one following it is a filtered version of the previous where the filtering is based on the
                    new
                    multi-character received.
                </para>
                <para>
                    Algorithm:
                    <list type="number">
                        <item>
                            <description>Add new entry to buffer if necessary</description>
                        </item>
                        <item>
                            <description>Filter the previous dictionary as follows</description>
                        </item>
                        <list type="bullet">
                            <item>
                                <description>Check whether the word is at least of adequate size (number of characters entered).</description>
                            </item>
                            <item>
                                <description>
                                    Check whether any of the characters (ignore whitespace) from the multi-character
                                    string fall on the expected position.
                                </description>
                            </item>
                        </list>
                        <item>
                            <description>Increase the current buffer position (to the newly filtered dictionary).</description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.PresageSuggestionSource">
            <summary>
                This class provides auto-completion suggestions obtained from an external application called Presage which uses an
                n-gram database to perform text prediction.
            </summary>
            <remarks>
                For more information on Presage, see http://presage.sourceforge.net/
            </remarks>
            <seealso cref="T:TalkingKeyboard.Infrastructure.ServiceInterfaces.ISuggestionSource" />
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.PresageSuggestionSource.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.PresageSuggestionSource" /> class.
            </summary>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.PresageSuggestionSource.GetSuggestions(System.Object)">
            <summary>
                Gets the suggestions.
            </summary>
            <param name="basedOn">
                String (as object) with the text on which the suggestions are based (i.e. the currently displayed
                text).
            </param>
            <returns>
                Returns an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> of strings containing the
                suggestions.
            </returns>
            <remarks>
                <para>
                    The suggestions are sorted by Presage. Configuration of Presage is done through an XML file located in its
                    installation folder.
                </para>
                <para>
                    Conversion between UTF8 (for this module) and Default encoding (for Presage) is performed when communicating
                    with the Presage Service.
                </para>
            </remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionSources.PresageSuggestionSource.InitializeChannel">
            <summary>
                Initializes the presage WCF channel.
            </summary>
        </member>
        <member name="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionsProviderModule">
            <summary>
                Class for initializing the module for providing suggestions based on the context (current text, current multi-text,
                etc.) given certain algorithms or services known as sources.
            </summary>
            <seealso cref="T:Prism.Modularity.IModule" />
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionsProviderModule.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Initializes a new instance of the <see cref="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionsProviderModule" /> class.
            </summary>
            <param name="unityContainer">The unity DI container (obtained through DI).</param>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionsProviderModule.Initialize">
            <summary>
                Registers a unique instance of the suggestion service in the dependency injection container.
            </summary>
        </member>
        <member name="T:TalkingKeyboard.Modules.SuggestionsProvider.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TalkingKeyboard.Modules.SuggestionsProvider.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TalkingKeyboard.Modules.SuggestionsProvider.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService">
            <summary>
                Defines the SuggestionService class which provides suggestion services such as auto-complete.
            </summary>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.#ctor(TalkingKeyboard.Infrastructure.Controls.ITextModel)">
            <summary>
                Initializes a new instance of the <see cref="T:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService" /> class.
            </summary>
            <param name="textModel">The text model (obtained through DI).</param>
        </member>
        <member name="P:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.WriteSuggestionCommand">
            <summary>
                Gets or sets the command for adding a suggestion.
            </summary>
            <value>
                The command for adding a suggestion.
            </value>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.AddMultiCharacterText(System.String)">
            <summary>
                Adds a multi-character to the buffer.
            </summary>
            <param name="s">The multi-character to add.</param>
            <remarks>
                The multi-character is a string with several characters, each of which will be considered as a potential
                character for the current position in the text. These characters may be separated by any whitespace character found
                in <see cref="P:TalkingKeyboard.Infrastructure.Constants.CharacterClasses.Whitespace" />
            </remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.ClearMultiCharacterBuffer">
            <summary>
                Clears the multi character buffer.
            </summary>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.ProvideMultiCharacterSuggestions">
            <summary>
                Provides suggestions according to the multi-key buffer.
            </summary>
            <returns>
                Returns an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> collection with disambiguation
                suggestions first and then auto-complete suggestions.
            </returns>
            <remarks>
                <para>
                    Disambiguation are those which match the number of keys selected and auto-complete are those which include keys
                    which have not been selected yet.
                </para>
                <para>Adds space and first-uppercases the suggestions if necessary.</para>
            </remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.ProvideSuggestions">
            <summary>
                Gets the suggestions based on the current text.
            </summary>
            <returns>
                Returns an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> of strings containing the
                suggestions.
            </returns>
            <remarks>
                <para>Adds space and first-uppercases the suggestions if necessary.</para>
            </remarks>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.RemoveLastMultiCharacter">
            <summary>
                Removes the last multi-character from the buffer.
            </summary>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.AddSpaceAndUppercaseIfNecessary(System.Collections.ObjectModel.ObservableCollection{System.String})">
            <summary>
                Adds space and first-uppercase if necessary to each string in a suggestion collection (based on the current text).
            </summary>
            <param name="collection">The suggestion collection.</param>
            <returns>
                A new collection where the strings are the same as in the original but with a space at the beginning if it is
                needed and where the first character is uppercase if necessary.
            </returns>
        </member>
        <member name="M:TalkingKeyboard.Modules.SuggestionsProvider.SuggestionService.WriteSuggestion(System.String)">
            <summary>
                Adds a suggestion.
            </summary>
            <param name="s">The suggestion.</param>
        </member>
    </members>
</doc>
